# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'b.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import detectron2
from PyQt5.QtCore import QThread, pyqtSignal
from PyQt5.QtGui import QTextCursor, QFont
from detectron2.utils.logger import setup_logger
setup_logger()
from time import sleep
from PyQt5 import QtCore, QtGui, QtWidgets
import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import QFileDialog, QMainWindow, QMessageBox
from PyQt5.QtCore import QObject, pyqtSignal, QEventLoop, QTimer, QThread, QTime
from PyQt5.QtGui import QTextCursor
from PyQt5.QtWidgets import QTextEdit

# import some common libraries
import numpy as np
import os, json, cv2, random
from detectron2.engine import DefaultTrainer
from detectron2.structures import BoxMode
# import some common detectron2 utilities
from detectron2 import model_zoo
from detectron2.engine import DefaultPredictor
from detectron2.config import get_cfg
from detectron2.utils.visualizer import Visualizer
from detectron2.data import MetadataCatalog, DatasetCatalog
import matplotlib
matplotlib.use('TkAgg')
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import matplotlib.cbook as cbook
import time
from time import sleep



from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QFileDialog, QMessageBox, QTextEdit


class xunlian_window(QMainWindow):
    def __init__(self):
        super().__init__()



        print("结果界面生成!")
        MainWindow = self
        self.i = 1
        self.imgName = ""
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1600, 1000)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.biaoti = QtWidgets.QLabel(self.centralwidget)
        self.biaoti.setGeometry(QtCore.QRect(450, 60, 700, 700))
        self.biaoti.setObjectName("biaoti")

        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(500, 800, 150, 46))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.select)




        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(800, 800, 150, 46))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.bClicked)

        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(1100, 800, 150, 46))
        self.pushButton_3.setObjectName("pushButton_3")


        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(500, 80, 700, 700))
        self.textBrowser.setObjectName("textBrowser")

        sys.stdout = EmittingStr(textWritten=self.outputWritten)
        sys.stderr = EmittingStr(textWritten=self.outputWritten)


        self.retranslateUi(MainWindow)

        MainWindow.show()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setFont(QFont("宋体", 14, QFont.Bold))
        self.pushButton_2.setFont(QFont("宋体", 14, QFont.Bold))
        self.pushButton_3.setFont(QFont("宋体", 14, QFont.Bold))
        self.pushButton.setText(_translate("MainWindow", "数据集选择"))
        self.pushButton_2.setText(_translate("MainWindow", "开始训练"))
        self.pushButton_3.setText(_translate("MainWindow", "返回主界面"))
        self.biaoti.setAlignment(Qt.AlignCenter)
        self.biaoti.setFont(QFont("宋体", 40, QFont.Bold))
        self.biaoti.setText(_translate("MainWindow", "模 型 训 练"))

    def outputWritten(self, text):
        cursor = self.textBrowser.textCursor()
        cursor.movePosition(QtGui.QTextCursor.End)
        cursor.insertText(text)
        self.textBrowser.setTextCursor(cursor)
        self.textBrowser.ensureCursorVisible()

    def bClicked(self):
        """Runs the main function."""
        print('Begin')
        loop = QEventLoop()
        QTimer.singleShot(1000, loop.quit)
        loop.exec_()
        self.train()
        loop = QEventLoop()
        QTimer.singleShot(1000, loop.quit)
        loop.exec_()
        print("End")

    def select(self):
        self.imgName, imgType = QFileDialog.getOpenFileName(self, "选择数据集", "", "*.jpg;;*.png;;All Files(*)")

    def sleep(seconds):
        start_time = time.time()  # 此处返回python调用函数开始时的时间戳
        while time.time() - start_time < seconds:  # 一直在比较是否小于seconds，直到大于或等于seconds停止
            pass


    def train(self):
        for d in ["train", "val"]:
            DatasetCatalog.register("balloon_" + d, lambda d=d: get_balloon_dicts("balloon/" + d))
            MetadataCatalog.get("balloon_" + d).set(thing_classes=["balloon"])
        balloon_metadata = MetadataCatalog.get("balloon_train")

        dataset_dicts = get_balloon_dicts("balloon/train")

        cfg = get_cfg()
        cfg.merge_from_file(model_zoo.get_config_file("COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml"))
        cfg.DATASETS.TRAIN = ("balloon_train",)
        cfg.DATASETS.TEST = ()
        cfg.DATALOADER.NUM_WORKERS = 2
        cfg.MODEL.WEIGHTS = model_zoo.get_checkpoint_url(
            "COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml")
        cfg.SOLVER.IMS_PER_BATCH = 2
        cfg.SOLVER.BASE_LR = 0.00025  # pick a good LR
        cfg.SOLVER.MAX_ITER = 300
        cfg.SOLVER.STEPS = []  # do not decay learning rate
        cfg.MODEL.ROI_HEADS.BATCH_SIZE_PER_IMAGE = 128
        cfg.MODEL.ROI_HEADS.NUM_CLASSES = 1
        os.makedirs(cfg.OUTPUT_DIR, exist_ok=True)
        trainer = DefaultTrainer(cfg)
        trainer.resume_or_load(resume=False)
        trainer.train()

        # print("Starting training from iteration 0")
        # print("eta: 0:02:04  iter: 19  total_loss: 2.046  loss_cls: 0.6769  loss_box_reg: 0.5966  loss_mask: 0.685  loss_rpn_cls: 0.02908  loss_rpn_loc: 0.008902  time: 0.4490  data_time: 0.0259  lr: 4.9953e-06  max_mem: 2724M")
        # print("eta: 0:01:53  iter: 39  total_loss: 2.083  loss_cls: 0.6601  loss_box_reg: 0.7223  loss_mask: 0.6551  loss_rpn_cls: 0.02151  loss_rpn_loc: 0.007349  time: 0.4379  data_time: 0.0069  lr: 9.9902e-06  max_mem: 2724M")
        # print("eta: 0:01:46  iter: 59  total_loss: 1.829  loss_cls: 0.5824  loss_box_reg: 0.5576  loss_mask: 0.6056  loss_rpn_cls: 0.03342  loss_rpn_loc: 0.007773  time: 0.4432  data_time: 0.0068  lr: 1.4985e-05  max_mem: 2724M")
        # print("eta: 0:01:36  iter: 79  total_loss: 1.664  loss_cls: 0.495  loss_box_reg: 0.612  loss_mask: 0.5251  loss_rpn_cls: 0.0398  loss_rpn_loc: 0.008393  time: 0.4408  data_time: 0.0078  lr: 1.998e-05  max_mem: 2724M")
        # print("eta: 0:01:28  iter: 99  total_loss: 1.653  loss_cls: 0.4368  loss_box_reg: 0.6527  loss_mask: 0.4676  loss_rpn_cls: 0.02758  loss_rpn_loc: 0.005817  time: 0.4405  data_time: 0.0076  lr: 2.4975e-05  max_mem: 2724M")
        # print("eta: 0:01:19  iter: 119  total_loss: 1.604  loss_cls: 0.4126  loss_box_reg: 0.7145  loss_mask: 0.4098  loss_rpn_cls: 0.0417  loss_rpn_loc: 0.00942  time: 0.4400  data_time: 0.0060  lr: 2.997e-05  max_mem: 2724M")
        # print("eta: 0:01:10  iter: 139  total_loss: 1.46  loss_cls: 0.3711  loss_box_reg: 0.6621  loss_mask: 0.3871  loss_rpn_cls: 0.02824  loss_rpn_loc: 0.01492  time: 0.4409  data_time: 0.0072  lr: 3.4965e-05  max_mem: 2724M")
        # print("eta: 0:01:02  iter: 159  total_loss: 1.283  loss_cls: 0.2932  loss_box_reg: 0.6513  loss_mask: 0.3031  loss_rpn_cls: 0.01643  loss_rpn_loc: 0.003501  time: 0.4432  data_time: 0.0076  lr: 3.996e-05  max_mem: 2724M")
        # print("eta: 0:00:53  iter: 179  total_loss: 1.307  loss_cls: 0.29  loss_box_reg: 0.724  loss_mask: 0.2765  loss_rpn_cls: 0.01487  loss_rpn_loc: 0.01075  time: 0.4436  data_time: 0.0080  lr: 4.4955e-05  max_mem: 2724M")
        # print("eta: 0:00:44  iter: 199  total_loss: 1.181  loss_cls: 0.2553  loss_box_reg: 0.6373  loss_mask: 0.2437  loss_rpn_cls: 0.02367  loss_rpn_loc: 0.008626  time: 0.4436  data_time: 0.0078  lr: 4.995e-05  max_mem: 2724M")
        # print("eta: 0:00:35  iter: 219  total_loss: 1.048  loss_cls: 0.213  loss_box_reg: 0.625  loss_mask: 0.2106  loss_rpn_cls: 0.02227  loss_rpn_loc: 0.005251  time: 0.4452  data_time: 0.0057  lr: 5.4945e-05  max_mem: 2724M")
        # print("eta: 0:00:26  iter: 239  total_loss: 1.049  loss_cls: 0.2045  loss_box_reg: 0.6159  loss_mask: 0.184  loss_rpn_cls: 0.01542  loss_rpn_loc: 0.008343  time: 0.4462  data_time: 0.0071  lr: 5.994e-05  max_mem: 2832M")
        # print("eta: 0:00:17  iter: 259  total_loss: 0.9736  loss_cls: 0.1754  loss_box_reg: 0.5704  loss_mask: 0.162  loss_rpn_cls: 0.01074  loss_rpn_loc: 0.006589  time: 0.4480  data_time: 0.0069  lr: 6.4935e-05  max_mem: 2832M")
        # print("eta: 0:00:08  iter: 279  total_loss: 0.8728  loss_cls: 0.151  loss_box_reg: 0.5358  loss_mask: 0.1624  loss_rpn_cls: 0.01978  loss_rpn_loc: 0.009639  time: 0.4488  data_time: 0.0075  lr: 6.993e-05  max_mem: 2832M")
        # print("eta: 0:00:00  iter: 299  total_loss: 0.7729  loss_cls: 0.1192  loss_box_reg: 0.4951  loss_mask: 0.1248  loss_rpn_cls: 0.01628  loss_rpn_loc: 0.003562  time: 0.4498  data_time: 0.0080  lr: 7.4925e-05  max_mem: 2832M")
        # print("Overall training speed: 298 iterations in 0:02:14 (0.4499 s / it)")
        # print("Total training time: 0:02:16 (0:00:02 on hooks)")


def get_balloon_dicts(img_dir):
    json_file = os.path.join(img_dir, "via_region_data.json")
    with open(json_file) as f:
        imgs_anns = json.load(f)

    dataset_dicts = []
    for idx, v in enumerate(imgs_anns.values()):
        record = {}

        filename = os.path.join(img_dir, v["filename"])
        height, width = cv2.imread(filename).shape[:2]

        record["file_name"] = filename
        record["image_id"] = idx
        record["height"] = height
        record["width"] = width

        annos = v["regions"]
        objs = []
        for _, anno in annos.items():
            assert not anno["region_attributes"]
            anno = anno["shape_attributes"]
            px = anno["all_points_x"]
            py = anno["all_points_y"]
            poly = [(x + 0.5, y + 0.5) for x, y in zip(px, py)]
            poly = [p for x in poly for p in x]

            obj = {
                "bbox": [np.min(px), np.min(py), np.max(px), np.max(py)],
                "bbox_mode": BoxMode.XYXY_ABS,
                "segmentation": [poly],
                "category_id": 0,
            }
            objs.append(obj)
        record["annotations"] = objs
        dataset_dicts.append(record)
    return dataset_dicts


class EmittingStr(QtCore.QObject):
    textWritten = QtCore.pyqtSignal(str) #定义一个发送str的信号
    def write(self, text):
      self.textWritten.emit(str(text))